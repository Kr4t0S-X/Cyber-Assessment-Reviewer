version: '3.8'

# Production override for docker-compose.yml
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

services:
  cyber-assessment-reviewer:
    # Production-specific environment variables
    environment:
      - FLASK_ENV=production
      - DEBUG=false
      - LOG_LEVEL=WARNING
      - WSGI_WORKERS=6
      - WSGI_THREADS=4
      - WSGI_TIMEOUT=180
    
    # Resource limits and reservations
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
      
      # Restart policy
      restart_policy:
        condition: unless-stopped
        delay: 5s
        max_attempts: 3
        window: 120s
    
    # Production logging
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # Read-only root filesystem (with exceptions for writable directories)
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    # Additional volume mounts for production
    volumes:
      - ./data/uploads:/app/uploads
      - ./data/sessions:/app/sessions
      - ./data/logs:/app/logs
      - ./data/models:/app/models
      # Separate volume for temporary files
      - temp_data:/app/temp

  ollama:
    # Resource limits for Ollama
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'
      
      restart_policy:
        condition: unless-stopped
        delay: 10s
        max_attempts: 3
        window: 120s
    
    # Production logging
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "3"
    
    # Security options
    security_opt:
      - no-new-privileges:true

  # Optional: Add nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: cyber-assessment-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./data/logs/nginx:/var/log/nginx
    depends_on:
      - cyber-assessment-reviewer
    networks:
      - cyber-assessment-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Optional: Add monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: cyber-assessment-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - cyber-assessment-network

  # Optional: Add Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: cyber-assessment-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - cyber-assessment-network

volumes:
  temp_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
