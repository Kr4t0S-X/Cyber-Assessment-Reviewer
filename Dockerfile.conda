# Multi-stage Conda-based Dockerfile for Cyber Assessment Reviewer
# Optimized for scientific computing with conda package management

# Stage 1: Base conda environment
FROM continuumio/miniconda3:latest as conda-base

# Set environment variables for conda
ENV CONDA_ENV_NAME=cyber-assessment-env \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    CONDA_ALWAYS_YES=true \
    CONDA_AUTO_UPDATE_CONDA=false

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    build-essential \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Update conda and install mamba for faster package resolution
RUN conda update -n base -c defaults conda && \
    conda install -n base -c conda-forge mamba

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set working directory
WORKDIR /app

# Stage 2: Environment builder
FROM conda-base as env-builder

# Copy conda environment specification
COPY environment.yml .

# Create conda environment with error handling and fallback
RUN echo "=== Creating conda environment ===" && \
    mamba env create -f environment.yml || \
    (echo "=== Mamba failed, trying conda ===" && \
     conda env create -f environment.yml) || \
    (echo "=== Both failed, trying step-by-step ===" && \
     conda create -n ${CONDA_ENV_NAME} python=3.10 -y && \
     conda install -n ${CONDA_ENV_NAME} -c conda-forge flask pandas numpy requests openpyxl scikit-learn matplotlib seaborn jupyter ipykernel -y && \
     conda install -n ${CONDA_ENV_NAME} -c conda-forge python-docx pypdf2 python-pptx -y || echo "Document packages skipped" && \
     conda install -n ${CONDA_ENV_NAME} -c pytorch pytorch cpuonly -y || echo "PyTorch skipped" && \
     /opt/conda/envs/${CONDA_ENV_NAME}/bin/pip install transformers ollama || echo "Pip packages skipped")

# Verify environment was created successfully
RUN conda env list | grep ${CONDA_ENV_NAME} || (echo "Environment creation failed" && exit 1)

# Clean up conda cache and unnecessary files
RUN conda clean -afy && \
    find /opt/conda -follow -type f -name '*.a' -delete && \
    find /opt/conda -follow -type f -name '*.pyc' -delete && \
    find /opt/conda -follow -type f -name '*.js.map' -delete

# Stage 3: Application builder
FROM env-builder as app-builder

# Copy application code
COPY . .

# Remove unnecessary files to reduce image size
RUN rm -rf \
    tests/ \
    *.md \
    .git/ \
    .gitignore \
    __pycache__/ \
    *.pyc \
    .pytest_cache/ \
    .coverage \
    setup-conda.* \
    test_*.py \
    docker-*.sh \
    docker-*.bat

# Stage 4: Production runtime (minimal)
FROM continuumio/miniconda3:latest as production

# Set environment variables
ENV CONDA_ENV_NAME=cyber-assessment-env \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    FLASK_ENV=production \
    DEBUG=False \
    USE_PRODUCTION_SERVER=true \
    HOST=0.0.0.0 \
    PORT=5000 \
    LOG_LEVEL=INFO \
    PATH="/opt/conda/envs/cyber-assessment-env/bin:$PATH"

# Install minimal system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Copy conda environment from builder stage
COPY --from=app-builder /opt/conda/envs/${CONDA_ENV_NAME} /opt/conda/envs/${CONDA_ENV_NAME}

# Set working directory
WORKDIR /app

# Copy application code from builder stage
COPY --from=app-builder /app .

# Create necessary directories with proper permissions
RUN mkdir -p uploads sessions logs static models && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 5000

# Health check using conda environment
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /opt/conda/envs/${CONDA_ENV_NAME}/bin/python -c "import requests; requests.get('http://localhost:5000/system_status', timeout=5)" || exit 1

# Create conda activation script
RUN echo '#!/bin/bash\nsource /opt/conda/etc/profile.d/conda.sh\nconda activate ${CONDA_ENV_NAME}\nexec "$@"' > /app/conda-entrypoint.sh && \
    chmod +x /app/conda-entrypoint.sh

# Set entrypoint to activate conda environment
ENTRYPOINT ["/app/conda-entrypoint.sh"]

# Default command
CMD ["python", "app.py"]

# Stage 5: Development image (includes dev tools)
FROM app-builder as development

# Install development dependencies
RUN /opt/conda/envs/${CONDA_ENV_NAME}/bin/conda install -c conda-forge \
    pytest \
    black \
    flake8 \
    mypy -y || \
    /opt/conda/envs/${CONDA_ENV_NAME}/bin/pip install pytest black flake8 mypy

# Set development environment variables
ENV FLASK_ENV=development \
    DEBUG=True \
    LOG_LEVEL=DEBUG

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Create necessary directories with proper permissions
RUN mkdir -p uploads sessions logs static models && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 5000

# Create conda activation script
RUN echo '#!/bin/bash\nsource /opt/conda/etc/profile.d/conda.sh\nconda activate ${CONDA_ENV_NAME}\nexec "$@"' > /app/conda-entrypoint.sh && \
    chmod +x /app/conda-entrypoint.sh

# Set entrypoint to activate conda environment
ENTRYPOINT ["/app/conda-entrypoint.sh"]

# Default command for development
CMD ["python", "app.py"]

# Stage 6: Minimal production image (conda-pack optimized)
FROM python:3.10-slim as minimal-production

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    FLASK_ENV=production \
    DEBUG=False \
    USE_PRODUCTION_SERVER=true \
    HOST=0.0.0.0 \
    PORT=5000 \
    LOG_LEVEL=INFO

# Install minimal system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set working directory
WORKDIR /app

# Copy packed conda environment (requires conda-pack in builder)
# COPY --from=app-builder /app/cyber-assessment-env.tar.gz .
# RUN tar -xzf cyber-assessment-env.tar.gz && rm cyber-assessment-env.tar.gz

# For now, copy the full conda environment
COPY --from=app-builder /opt/conda/envs/cyber-assessment-env /opt/conda/envs/cyber-assessment-env

# Copy application code
COPY --from=app-builder /app .

# Create necessary directories with proper permissions
RUN mkdir -p uploads sessions logs static models && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /opt/conda/envs/cyber-assessment-env/bin/python -c "import requests; requests.get('http://localhost:5000/system_status', timeout=5)" || exit 1

# Set PATH to use conda environment
ENV PATH="/opt/conda/envs/cyber-assessment-env/bin:$PATH"

# Default command
CMD ["python", "app.py"]
